import { createSlice } from "@reduxjs/toolkit";
import { fetchCampers, fetchCamperById } from "./operations";

const initialState = {
    campers: [],         // –°–ø–∏—Å–æ–∫ –∫–µ–º–ø–µ—Ä–æ–≤
    currentCamper: null, // –í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–µ–º–ø–µ—Ä (–¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    totalCampers: null,  // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–º–ø–µ—Ä–æ–≤ (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–¥–∞–µ—Ç)
    isLoading: false,    // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
    error: null,         // –û—à–∏–±–∫–∏ API
};

const campersSlice = createSlice({
    name: "campers",
    initialState,
    reducers: {
        resetCampers: (state) => {
            state.campers = [];
            state.totalCampers = null;
        },
    },
    extraReducers: (builder) => {
        builder
            // üîπ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–µ–º–ø–µ—Ä–æ–≤
            .addCase(fetchCampers.pending, (state) => {
                state.isLoading = true;
                state.error = null;
            })
            .addCase(fetchCampers.fulfilled, (state, action) => {
                state.isLoading = false;
                state.totalCampers = action.payload.total;

                // –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)
                const newCampers = action.payload.items.filter(
                    (newCamper) =>
                        !state.campers.some(
                            (existingCamper) => existingCamper.id === newCamper.id
                        )
                );
                state.campers = [...state.campers, ...newCampers];
            })
            .addCase(fetchCampers.rejected, (state, action) => {
                state.isLoading = false;
                state.error = action.payload;
            })

            // üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ –∫–µ–º–ø–µ—Ä–∞ –ø–æ ID
            .addCase(fetchCamperById.pending, (state) => {
                state.isLoading = true;
                state.error = null;
            })
            .addCase(fetchCamperById.fulfilled, (state, action) => {
                state.isLoading = false;
                state.currentCamper = action.payload;
            })
            .addCase(fetchCamperById.rejected, (state, action) => {
                state.isLoading = false;
                state.error = action.payload;
            });
    },
});

// üîπ –≠–∫—Å–ø–æ—Ä—Ç —ç–∫—à–µ–Ω–æ–≤ –∏ —Ä–µ–¥—é—Å–µ—Ä–∞
export const { resetCampers } = campersSlice.actions;
export const campersReducer = campersSlice.reducer;
